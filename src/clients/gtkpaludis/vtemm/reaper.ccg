/* vim: set sw=4 sts=4 et foldmethod=syntax : */

/*
 * Copyright (c) 2006 Piotr Rak
 *
 * This file is part of the Paludis package manager. Paludis is free software;
 * you can redistribute it and/or modify it under the terms of the GNU General
 * Public License version 2, as published by the Free Software Foundation.
 *
 * Paludis is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 59 Temple
 * Place, Suite 330, Boston, MA  02111-1307  USA
 */

#include <vte/reaper.h>
#include <paludis/util/exception.hh>

namespace
{
    
    void Reaper_proxy_signal_child_exited(GObject*, int pid, int status, gpointer data)
    {
        #ifdef GLIBMM_EXCEPTIONS_ENABLED
        try
        {
        #endif //GLIBMM_EXCEPTIONS_ENABLED
            if (Vte::Reaper::get_instance() == data) //ignore signals connected using c api
                Vte::Reaper::get_instance()->signal_child_exited().emit(pid, status);
        #ifdef GLIBMM_EXCEPTIONS_ENABLED
        }
        catch(...)
        {
            Glib::exception_handlers_invoke();
        }
        #endif //GLIBMM_EXCEPTIONS_ENABLED
    }
} /* anonymous namspace */

namespace Vte
{

    Reaper::Reaper() :
        Glib::Object(reinterpret_cast<GObject*>(::vte_reaper_get()))
    {
        //TODO: looks like vte-0.13.3 has child-exited renamed abi/api breakage??
        //propably shoud be also unregistred if Reaper will stop be singleton
        g_signal_connect(G_OBJECT(gobj()), "child-exited", G_CALLBACK(Reaper_proxy_signal_child_exited) , this);
    }

    int Reaper::add_child(GPid pid)
    {
        return vte_reaper_add_child(pid);
    }

    sigc::signal<void, int, int>& Reaper::signal_child_exited()
    {
        return _signal_child_exited;
    }
}

