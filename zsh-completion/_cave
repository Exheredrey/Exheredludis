#compdef cave

# vim: set et sw=2 sts=2 ts=2 ft=zsh :
# ZSH completion for `cave`
# Written by Ingmar Vanhassel <ingmar@exherbo.org>

_cave()
{
  local -a _cave_arguments _cave_commands
  local cmd

  _cave_arguments=(
    '(-E --environment)'{-E,--environment}'[Environment specification]:environment specification: '
    '--log-level[Specify the log level]:log level:((debug\:"Show debug output (noisy)"
                                                    qa\:"Show QA messages and warnings only (default)"
                                                    warning\:"Show warnings only"
                                                    silent\:"Suppress all log messages (UNSAFE)"))'
  )

  _cave_commands=(
    'help:Display help information for a particular command'
    'perform:Perform an action upon a package'
    'print-categories:Prints a list of known categories'
    'print-commands:Prints a list of known cave commands'
    'print-environment-metadata:Prints environment metadata'
    'print-id-contents:Prints the contents of a package ID'
    'print-id-executables:Prints a list of executables belonging to an ID'
    'print-id-metadata:Prints ID metadata'
    'print-ids:Prints a list of known IDs'
    'print-owners:Prints a list of package IDs owning a given file'
    'print-packages:Prints a list of package names'
    'print-repositories:Prints a list of repositories'
    'print-sets:Prints a list of sets'
    'print-sync-protocols:Prints a list of sync protocols'
    'resolve:Display how to resolve targets and optionally perform that resolution'
    'show:Displays a formatted summary of a given object'
    'sync:Sync all or specified repositories'
    'update-world:Update the world set'
  )

  for (( i=1; i <= ${CURRENT}; i++ )); do
    cmd=${_cave_commands[(r)${words[${i}]}:*]%%:*}
    (( ${#cmd} )) && break
  done

  if (( ${#cmd} )); then
    local curcontext="${curcontext%:*:*}:cave-${cmd}:"

    while [[ ${words[1]} != ${cmd} ]]; do
      (( CURRENT-- ))
      shift words
    done

    _call_function ret _cave_cmd_${cmd}
    return ret
  else
    if [[ ${words[CURRENT-1]} == --* ]]; then
      _arguments -s : \
        ${_cave_arguments}
    else
      _describe -t commands 'cave command' _cave_commands
      _arguments -s : \
        ${_cave_arguments}
    fi
  fi

}

(( ${+functions[_cave_cmd_help]} )) ||
_cave_cmd_help()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '*::arg:->cave_commands' && return

  case ${state} in
    (cave_commands)
      _describe -t commands 'cave command' _cave_commands
      ;;
  esac
}

(( ${+functions[_cave_cmd_perform]} )) ||
_cave_cmd_perform()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '(--if-supported --no-if-supported)'{--if-supported,--no-if-supported}'[Exit with success rather than erroring, if the action is not supported]' \
    '(--hooks --no-hooks)'{--hooks,--no-hooks}'[Execute appropriate hooks for the action]'
}

(( ${+functions[_cave_cmd_print-categories]} )) ||
_cave_cmd_print-categories()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '--containing[Show only categories containing this package name]:package name: ' \
    '--repository[Show only categories in this repository]:repository name: '
}

(( ${+functions[_cave_cmd_print-commands]} )) ||
_cave_cmd_print-commands()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]'
}

(( ${+functions[_cave_cmd_print-environment-metadata]} )) ||
_cave_cmd_print-environment-metadata()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '--raw-name[Show only keys with this raw name]:raw name: ' \
    '--human-name[Show only keys with this human name]:human name: ' \
    '--format[Select the output format]:format: '
}

(( ${+functions[_cave_cmd_print-id-contents]} )) ||
_cave_cmd_print-id-contents()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '--best[If the spec matches multiple IDs, select the best ID rather than giving an error]' \
    '--nobest[If the spec matches multiple IDs, give an error]' \
    '--format[Select the output format]:format: '
}

(( ${+functions[_cave_cmd_print-id-executables]} )) ||
_cave_cmd_print-id-executables()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]'
}


(( ${+functions[_cave_cmd_print-id-metadata]} )) ||
_cave_cmd_print-id-metadata()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '--best[If the spec matches multiple IDs, select the best ID rather than giving an error]' \
    '--nobest[If the spec matches multiple IDs, give an error]' \
    '--raw-name[Show only keys with this raw name]:raw name: ' \
    '--human-name[Show only keys with this human name]:human name: ' \
    '--format[Select the output format]:output format: '
}

(( ${+functions[_cave_cmd_print-ids]} )) ||
_cave_cmd_print-ids()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '--matching[Show only IDs matching this spec]:package spec: ' \
    '--supporting[Show only IDs supporting this action]:supporting action:((install installed uninstall pretend config fetch pretend-fetch info))' \
    '--with-mask[Show only IDs with this kind of mask]:with mask:((none any user unaccepted repository unsupported association))'
}

(( ${+functions[_cave_cmd_print-owners]} )) ||
_cave_cmd_print-owners()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '(--match -m)'{--match,-m}'[Which match algorithm to use]:match algorithm:((auto\:"If pattern starts with a \/, full; if it contains a \/, partial; otherwise, basename (default)"
                                                                                basename\:"Basename match"
                                                                                full\:"Full match"
                                                                                partial\:"Partial match"))' \
    '*:file:_files'
}

(( ${+functions[_cave_cmd_print-packages]} )) ||
_cave_cmd_print-packages()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]'
}


(( ${+functions[_cave_cmd_print-repositories]} )) ||
_cave_cmd_print-repositories()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '--format[Show only repositories of a specific format]:repository format: '
}

(( ${+functions[_cave_cmd_resolve]} )) ||
_cave_cmd_resolve()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '(--execute -x)'{--execute,-x}'[Execute resolution]' \
    '(--lazy -z --complete -c --everything -e --no-lazy --no-complete --no-everything)'{--lazy,-z,--no-lazy}'[Do as little work as possible]' \
    '(--lazy -z --complete -c --everything -e --no-lazy --no-complete --no-everything)'{--complete,-c,--no-complete}'[Do all optional work]' \
    '(--lazy -z --complete -c --everything -e --no-lazy --no-complete --no-everything)'{--everything,-e,--no-everything}'[Do all optional work, and also reinstall]' \
    '--explain[Explain why decisions are made]:package depspec: ' \
    '(--keep-targets -K)'{--keep-targets,-K}'[Select whether to keep target packages]:When:((auto never if-transient if-same if-same-version if-possible))' \
    '(--keep -k)'{--keep,-k}'[Select whether to keep packages that are not targets]:When:((never if-transient if-same if-same-version if-possible))' \
    '(--reinstall-scm -R)'{--reinstall-scm,-R}'[Select whether to reinstall SCM packages that would otherwise be kept]:When:((always daily weekly never))' \
    '(--target-slots -S)'{--target-slots,-S}'[Which slots to consider for targets]:Which:((best-or-installed installed-or-best all best))' \
    '(--slots -s)'{--slots,-s}'[Which slots to consider for packages that are not targets]:Which:((best-or-installed installed-or-best all best))' \
    '(--follow-installed-build-dependencies --no-follow-installed-build-dependencies -D)'{--follow-installed-build-dependencies,--no-follow-installed-build-dependencies,-D}'[Follow build dependencies for installed packages]' \
    '(--ignore-installed-dependencies --no-ignore-installed-dependencies -d)'{--ignore-installed-dependencies,--no-ignore-installed-dependencies,-d}'[Ignore dependencies for installed packages]' \
    '(--dump --no-dump)'{--dump,--no-dump}'[Dump debug output]' \
    '(--dump-dependencies --no-dump-dependencies)'{--dump-dependencies,--no-dump-dependencies}'[Dump the sanitised dependencies selected for every package]' \
    '(--preserve-world -1 --no-preserve-world)'{--preserve-world,-1,--no-preserve-world}'[Do not modify the world set]' \
    '--continue-on-failure[Whether to continue after an error occurs]:When:((if-fetching never if-satisfied if-independent always))' \
    '--skip-phase[Skip the named phases]:Phase: ' \
    '--abort-at-phase[Abort when a named phase is encountered]:Phase: ' \
    '--skip-until-phase[Skip every phase until a named phase is encountered]:Phase: ' \
    '--change-phases-for[Control to which packages these phase options apply]:Which:((all first last))' \
    '--show-descriptions[Whether to display package descriptions]:When:((none new all))'
}

(( ${+functions[_cave_cmd_show]} )) ||
_cave_cmd_show()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '--type[Specify the type of the specified objects]:object type:((auto repository set wildcard package))' \
    '(--complex-keys -c)'{--complex-keys,-c}'[Show complex keys]' \
    '(--internal-keys -i)'{--internal-keys,-i}'[Show keys regardless of importance, including internal-only values]' \
    '(--flat -f)'{--flat,-f}'[Do not spread key values over multiple lines]'
}

(( ${+functions[_cave_cmd_sync]} )) ||
_cave_cmd_sync()
{
  # TODO: Complete repository names
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]'
}

(( ${+functions[_cave_cmd_update-world]} )) ||
_cave_cmd_update-world()
{
  _arguments -s : \
    '(--help -h)'{--help,-h}'[Display help messsage]' \
    '(--remove --no-remove -r)'{--remove,--no-remove,-r}'[Remove the specified items]' \
    '(--set --no-set -s)'{--set,--no-set,-s}'[Parameters are set names, not package names]'
}

_cave "${@}"

