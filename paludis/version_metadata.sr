#!/bin/bash
# vim: set sw=4 sts=4 et :

make_class_VersionMetadataCapabilities()
{
    visible

    key ebuild_interface "VersionMetadataEbuildInterface *"
    key ebin_interface "VersionMetadataEbinInterface *"
    key cran_interface "VersionMetadataCRANInterface *"
    key deps_interface "VersionMetadataDepsInterface *"
    key origins_interface "VersionMetadataOriginsInterface *"
    key virtual_interface "VersionMetadataVirtualInterface *"
    key license_interface "VersionMetadataLicenseInterface *"

    doxygen_comment << "END"
        /**
         * Optional interfaces that may be provided by VersionMetadata.
         *
         * \see VersionMetadata
         * \ingroup grpversions
         * \nosubgrouping
         */
END

    allow_named_args
}

make_class_VersionMetadataDepsInterface()
{
    visible

    inherit "public virtual VersionMetadataHasInterfaces"

    key parser DepParserFunction

    cache_key build_depend std::string DependencySpecTree::ConstItem _make_depend
    cache_key run_depend std::string DependencySpecTree::ConstItem _make_depend
    cache_key post_depend std::string DependencySpecTree::ConstItem _make_depend
    cache_key suggested_depend std::string DependencySpecTree::ConstItem _make_depend

    extra_constructors <<END
            VersionMetadataDepsInterface(const DepParserFunction &);
END

    extra_methods <<END
        private:
            tr1::shared_ptr<const DependencySpecTree::ConstItem> _make_depend(const std::string &) const;
END

    doxygen_comment << "END"
        /**
         * Dependency data for VersionMetadata.
         *
         * \see VersionMetadata
         * \ingroup grpversions
         */
END
}

make_class_VersionMetadataLicenseInterface()
{
    visible

    inherit "public virtual VersionMetadataHasInterfaces"

    key parser LicenseParserFunction
    cache_key license std::string LicenseSpecTree::ConstItem _make_license

    extra_constructors <<END
            VersionMetadataLicenseInterface(const LicenseParserFunction &);
END

    doxygen_comment << "END"
        /**
         * License data for VersionMetadata.
         *
         * \see VersionMetadata
         * \ingroup grpversions
         */
END

    extra_methods <<END
        private:
            tr1::shared_ptr<const LicenseSpecTree::ConstItem> _make_license(const std::string &) const;
END
}

make_class_VersionMetadataOriginsInterface()
{
    visible

    inherit "public virtual VersionMetadataHasInterfaces"

    key "source" "tr1::shared_ptr<PackageDatabaseEntry>"
    key "binary" "tr1::shared_ptr<PackageDatabaseEntry>"

    extra_constructors <<END
            VersionMetadataOriginsInterface();
END

    doxygen_comment << "END"
        /**
         * Origins data for VersionMetadata.
         *
         * \see VersionMetadata
         * \ingroup grpversions
         */
END
}

make_class_VersionMetadataBase()
{
    visible

    inherit "public virtual VersionMetadataHasInterfaces"

    key slot SlotName
    cache_key homepage std::string URISpecTree::ConstItem _make_text
    key description std::string
    key eapi EAPI
    key interactive bool

    allow_named_args

    doxygen_comment << "END"
        /**
         * Version metadata common to all VersionMetadata types.
         *
         * \see VersionMetadata
         * \ingroup grpversions
         */
END

    extra_methods <<END
        private:
            tr1::shared_ptr<const URISpecTree::ConstItem> _make_text(const std::string &) const;
END
}

make_class_VersionMetadataEbuildInterface()
{
    visible

    inherit "public virtual VersionMetadataHasInterfaces"

    cache_key provide std::string ProvideSpecTree::ConstItem _make_provide
    cache_key src_uri std::string URISpecTree::ConstItem _make_uri
    cache_key restrictions std::string RestrictSpecTree::ConstItem _make_restrict
    cache_key keywords std::string KeywordNameCollection "_make_collection<KeywordName, KeywordNameCollection>"
    cache_key eclass_keywords std::string KeywordNameCollection "_make_collection<KeywordName, KeywordNameCollection>"
    cache_key iuse std::string IUseFlagCollection "_make_iuse_collection"
    cache_key inherited std::string InheritedCollection "_make_collection<std::string, InheritedCollection>"

    extra_constructors <<END
            VersionMetadataEbuildInterface();
END

    allow_named_args

    doxygen_comment << "END"
        /**
         * Version metadata for ebuilds.
         *
         * \see VersionMetadata
         * \ingroup grpversions
         */
END

    extra_methods <<END
        private:
            tr1::shared_ptr<const ProvideSpecTree::ConstItem> _make_provide(const std::string &) const;
            tr1::shared_ptr<const URISpecTree::ConstItem> _make_uri(const std::string &) const;
            tr1::shared_ptr<const RestrictSpecTree::ConstItem> _make_restrict(const std::string &) const;

            template <typename Item_, typename Container_>
            tr1::shared_ptr<const Container_> _make_collection(const std::string &) const;

            tr1::shared_ptr<const IUseFlagCollection> _make_iuse_collection(const std::string &) const;
END
}

make_class_VersionMetadataEbinInterface()
{
    visible

    inherit "public virtual VersionMetadataHasInterfaces"

    cache_key bin_uri std::string URISpecTree::ConstItem _make_uri

    extra_constructors <<END
            VersionMetadataEbinInterface();
END

    allow_named_args

    doxygen_comment << "END"
        /**
         * Version metadata for ebins.
         *
         * \see VersionMetadata
         * \ingroup grpversions
         */
END

    extra_methods <<END
        private:
            tr1::shared_ptr<const URISpecTree::ConstItem> _make_uri(const std::string &) const;
END
}

make_class_VersionMetadataCRANInterface()
{
    visible

    inherit "public virtual VersionMetadataHasInterfaces"

    cache_key keywords std::string KeywordNameCollection "_make_collection<KeywordName, KeywordNameCollection>"
    key package std::string
    key version std::string
    key is_bundle bool
    key is_bundle_member bool

    allow_named_args

    doxygen_comment << "END"
        /**
         * Version metadata for CRAN packages.
         *
         * \see VersionMetadata
         * \ingroup grpversions
         */
END

    extra_methods <<END
        private:
            template <typename Item_, typename Container_>
            tr1::shared_ptr<const Container_> _make_collection(const std::string &) const;
END
}

make_class_VersionMetadataVirtualInterface()
{
    visible

    inherit "public virtual VersionMetadataHasInterfaces"

    key virtual_for PackageDatabaseEntry

    doxygen_comment << "END"
        /**
         * Version metadata for virtual packages.
         *
         * \see VersionMetadata
         * \ingroup grpversions
         */
END
}

