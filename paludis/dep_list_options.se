#!/bin/bash
# vim: set sw=4 sts=4 et ft=sh :

make_enum_DepListTargetType()
{
    prefix dl_target

    key dl_target_package       "A package, so force reinstalls."
    key dl_target_set           "A set, so don't force reinstalls."

    doxygen_comment << "END"
        /**
         * Type of target being handled at the top level.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListReinstallOption()
{
    prefix dl_reinstall

    key dl_reinstall_never           "Never"
    key dl_reinstall_always          "Always"
    key dl_reinstall_if_use_changed  "If a USE flag has changed"

    doxygen_comment << "END"
        /**
         * When we should reinstall.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListFallBackOption()
{
    prefix dl_fall_back

    key dl_fall_back_as_needed_except_targets      "As needed, except for targets"
    key dl_fall_back_as_needed                     "As needed"
    key dl_fall_back_never                         "Never"

    doxygen_comment << "END"
        /**
         * When we should fall back to an installed package.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListReinstallScmOption()
{
    prefix dl_reinstall_scm

    key dl_reinstall_scm_never        "Never"
    key dl_reinstall_scm_always       "Always"
    key dl_reinstall_scm_daily        "Daily"
    key dl_reinstall_scm_weekly       "Weekly"

    doxygen_comment << "END"
        /**
         * When we should reinstall SCM packages.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListUpgradeOption()
{
    prefix dl_upgrade

    key dl_upgrade_always             "Always"
    key dl_upgrade_as_needed          "Only as needed"

    doxygen_comment << "END"
        /**
         * When we should upgrade.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListDowngradeOption()
{
    prefix dl_downgrade
    key dl_downgrade_as_needed           "As needed"
    key dl_downgrade_warning             "As needed, but warn"
    key dl_downgrade_error               "Refuse to downgrade"

    doxygen_comment << "END"
        /**
         * What to do when we downgrade.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListNewSlotsOption()
{
    prefix dl_new_slots

    key dl_new_slots_always          "Always"
    key dl_new_slots_as_needed       "Only where necessary"

    doxygen_comment << "END"
        /**
         * When we should pull in a new slot.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListDepsOption()
{
    prefix dl_deps

    key dl_deps_discard           "Discard it"
    key dl_deps_pre               "As a pre dependency"
    key dl_deps_pre_or_post       "As a pre dependency with fallback to post"
    key dl_deps_post              "As a post dependency"
    key dl_deps_try_post          "As an optional post dependency"

    doxygen_comment << "END"
        /**
         * How we should handle a dep class.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListSuggestedOption()
{
    prefix dl_suggested
    key dl_suggested_show         "Show"
    key dl_suggested_discard      "Discard"
    key dl_suggested_install      "Install"

    doxygen_comment << "END"
        /**
         * How we should handle suggested deps.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListCircularOption()
{
    prefix dl_circular

    key dl_circular_error              "As an error"
    key dl_circular_discard            "Discard them"
    key dl_circular_discard_silently   "Discard them silently"

    doxygen_comment << "END"
        /**
         * How we should handle circular deps.
         *
         * \see DepListOptions
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListBlocksOption()
{
    prefix dl_blocks

    key dl_blocks_accumulate         "Accumulate them and show all errors together"
    key dl_blocks_error              "Error on the first one"
    key dl_blocks_discard            "Discard (dangerous)"
    key dl_blocks_discard_completely "Discard completely (not for user visible use)"

    doxygen_comment <<"END"
        /**
         * How we handle blocks.
         *
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListUseOption()
{
    prefix dl_use_deps
    key dl_use_deps_standard  "Behave as standard"
    key dl_use_deps_take_all  "Take both sides of use conditionals except on masks"

    doxygen_comment <<"END"
        /**
         * How we handle use deps.
         *
         * Not for end user use. Used by adjutrix and qa.
         *
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListEntryState()
{
    prefix dle

    key dle_no_deps         "Dependencies have yet to be added"
    key dle_has_pre_deps    "Predependencies have been added"
    key dle_has_all_deps    "All dependencies have been added"

    doxygen_comment <<"END"
        /**
         * State of a DepListEntry.
         *
         * \ingroup g_dep_list
         */
END
}

make_enum_DepListEntryKind()
{
    prefix dlk

    key dlk_package           "A package to be installed"
    key dlk_subpackage        "A package to be installed as part of the previous dlk_package"
    key dlk_already_installed "An already installed package"
    key dlk_virtual           "A virtual package"
    key dlk_provided          "A package provided by the previous dlk_package"
    key dlk_suggested         "A package suggested by the previous dlk_package"
    key dlk_block             "A blocked package that must be removed"
    key dlk_masked            "A masked package that must be unmasked"

    doxygen_comment <<"END"
        /**
         * Kind of a DepListEntry.
         *
         * \ingroup g_dep_list
         */
END
}

