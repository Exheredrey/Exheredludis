<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en">
<head>
<title>Paludis, the Other Package Mangler</title>
<link rel="stylesheet" href="paludis.css" type="text/css" />
</head>
<body>
@HEADER@

<h1>Paludis, the Other Package Mangler</h1>

<h2>FAQ</h2>

<p>This document describes some of the more commonly encountered problems, issues
and things that aren't bugs but might look like they are. Pestering anyone about
these is liable to get you hurt.</p>

<p>This document also describes some things that are not bugs or missing
functionality. Pestering anyone about these is liable to get you hurt a lot.</p>

@TOC@

<h2 id="general">General Paludis Questions</h2>

<h3 id="ihaveaquestion">I have an Unanswered Question</h3>

<p>If you've checked the documentation, and your question really isn't answered,
you should ask it in one of these places:</p>

<ul>
    <li>The <code>#paludis</code> channel on <code>irc.freenode.net</code></li>
    <li>The <a href="https://developer.berlios.de/mail/?group_id=6360">paludis-user
        mailing list</a></li>
    <li>The <a href="http://paludis.pioto.org/trac/">bug tracker</a> will probably also be useful</li>
</ul>

<p>You are encouraged to submit an entry for this document once your question
has been answered.</p>

<h3 id="why">Why not fix Portage?</h3>

<p>The Portage codebase is too broken to be fixed. It is a huge mess of
spaghetti procedural code with no underlying design. It relies upon weird
quirks in its own behaviour all over the place, so any change is liable to
cause huge breakage in seemingly unrelated areas. It is almost entirely
undocumented, and the internal names are perverse and often do not reflect what
the code now does.</p>

<h3 id="cplusplus">Why C++?</h3>

<p>Because we don't have the time or the manpower to write it in C.</p>

<h3 id="contribute">Contributing</h3>

<p>Contributions to Paludis are welcome:</p>

<ul>
    <li>Patches can be submitted via <a
        href="http://paludis.pioto.org/trac/">trac</a>. It's best to
    discuss ideas before spending too much time on the code, because we don't
    have any qualms about rejecting things we think are a bad idea.</li>

    <li>We could probably use some more documentation. Again, ask first.</li>

    <li>Translations aren't currently possible. We don't have anything against
    internationalisation in principle, but as we're not gettextised it'll be a
    fair bit of effort.</li>

    <li>If you're thinking about donating cash, hardware, etc., it's probably
    easiest to talk to us on IRC first. Alternatively, you can donate stuff
    using  the following Amazon wishlists:
    <ul>
        <li>Ciaran McCreesh's <a href="http://www.amazon.co.uk/gp/registry/registry.html/026-3388518-6349216?ie=UTF8&amp;type=wishlist&amp;id=16LVEYP610005">Amazon.co.uk wishlist</a>.</li>
        <li>Danny van Dyk's <a href="http://www.amazon.de/gp/registry/registry.html/302-9394188-4603250?ie=UTF8&amp;type=wishlist&amp;id=1VYVUQ9CAEBM8">Amazon.de wishlist</a>.</li>
	<li>Stephen P. Bennett's <a href="https://www.amazon.co.uk/gp/registry/wishlist/3QAXX2WBNBW9W/ref=cm_reg_rd-upd/026-1190159-2009266?ie=UTF8&amp;msgid=updated">Amazon.co.uk wishlist</a>.</li>
	<li>Mike Kelly's <a href="http://www.amazon.com/gp/registry/wishlist/3LUY7EGNEJR7N/">Amazon.com wishlist</a>.</li>
    </ul></li>

    <li>We're pretty much ok for hosting currently.</li>
</ul>

<h2 id="howdoi">How do I...</h2>

<h3 id="ccache">Use <code>ccache</code></h3>

<p>To enable <code>ccache</code>, simply set the relevant variables in your
configuration <code>bashrc</code>:</p>

<pre>
PATH="/usr/lib/ccache/bin/:${PATH}"
CCACHE_DIR="/var/tmp/ccache"
</pre>

<h3 id="distcc">Use <code>distcc</code></h3>

<p>To enable <code>distcc</code>, simply set the relevant variables in your
configuration <code>bashrc</code>:</p>

<pre>
DISTCC_DIR="/var/tmp/paludis/.distcc"
DISTCC_HOSTS="localhost another_host"
PATH="/usr/lib/distcc/bin:${PATH}"
</pre>

<h3 id="defaultoptions">Specify default options</h3>

<p>Often users want to specify certain options by default. Common choices include:</p>

<ul>
    <li><code>--debug-build split</code>, to make debugging easier (at the cost of disk
    space)</li>

    <li><code>--log-level warning</code> (you should <strong>not</strong> use
    <code>silent</code> in this way -- warnings are warnings because you need
    to read them)</li>

    <li><code>--show-reasons summary</code></li>

    <li><code>--resume-command-template $HOME/.paludis-resume-XXXXXX</code></li>

    <li><code>--dl-reinstall-scm weekly</code></li>

    <li><code>--safe-resume</code></li>
</ul>

<p>You can either use a shell alias, or <code>export
    PALUDIS_OPTIONS="--options"</code> (in your environment, not in the
configuration <code>bashrc</code>).</p>

<h3 id="removeunneeded">Remove unneeded packages</h3>

<p>Paludis has three ways of removing unused packages. You should <strong>always</strong>
use <code>--pretend</code> and check the output before proceeding:</p>

<dl>
    <dt><code>--uninstall-unused</code></dt>
    <dd>
    <p>For the purposes of <code>--uninstall-unused</code>, an installed package
    is <em>used</em> if any of these conditions are true:</p>

    <ul>
        <li>It is matched by any dependency specification in any repository's <code>system</code> or
        <code>world</code> set.</li>
        <li>It is depended upon by another used package.</li>
    </ul>

    <p>This action will therefore flag any packages that are no longer in use,
    for example because they were only pulled in by a package that is no longer
    installed, or because they were required by an old version of a package but
    no longer are.</p>
    </dd>

    <dt><code>--uninstall --with-unused-dependencies</code></dt>
    <dd>
    <p>This action will uninstall a package, along with any of its dependencies
    that will no longer be used once the target package is removed.</p>

    <p>This action is recursive, so if <code>foo</code> depends upon <code>bar</code>
    and <code>bar</code> depends upon <code>baz</code>, and if neither <code>bar</code>
    nor <code>baz</code> are otherwise required, uninstalling <code>foo</code> will
    also uninstall <code>bar</code> then <code>baz</code>.</p>
    </dd>

    <dt><code>--uninstall --with-dependencies</code></dt>
    <dd>
    <p>This action will uninstall a package, along with any other package that
    requires this package as a dependency. Again, this action is recursive.</p>
    </dd>
</dl>

<p>Some important notes:</p>

<ul>
    <li>These actions rely upon a package's dependencies being correctly specified.
    They do not attempt to figure out whether a package has unlisted dependencies
    using devious trickery.</li>

    <li>These actions rely upon a package correctly using <code>USE</code> flags. If
    a package was built with, say, <code>-foo</code> whilst <code>libfoo</code> was
    installed, Paludis will not consider the package to require <code>libfoo</code>.
    Unfortunately, some people don't know how to use <code>autoconf</code> correctly,
    so this assumption is currently not entirely safe in all cases.</li>

    <li>Currently a package's build dependencies, as well as its runtime and post
    dependencies, are used when determining needed packages. Experimentation has
    shown that doing otherwise will lead to an awful lot of breakage -- in the future,
    if ebuild authors start being more careful, this behaviour may become
    controllable.</li>

    <li>For the case of any-of (<code>|| ( foo bar )</code>) dependencies, Paludis
    currently does the safe thing and assumes that all available options, if
    installed, are needed. This cannot be changed safely until ebuild authors stop
    abusing <code>|| ( )</code> -- this construct <em>should</em> only be used
    where the dependency can be switched at runtime, but unfortunately it is
    often used to mean "compile against one of these".</li>
</ul>

<h3 id="unmask">Unmask a Package</h3>

<p>First, you need to determine how a package is masked. The easiest way to do
this is to use <code>paludis --query</code>. Then, if you're sure you really
want to unmask a package, and bearing in mind that doing so might break your
system, you need to override the mask. How to do this depends upon the mask
reasons:</p>

<dl>
    <dt>keyword</dt>

    <dd>You need to add an entry to your <code>keywords.conf</code> accepting
    one of the ebuild's keywords. The special <code>-*</code> keyword cannot be
    accepted this way; if an ebuild only has this in its keywords, report it
    to <a href="https://bugs.gentoo.org/show_bug.cgi?id=160519">Gentoo bug
        160519</a> and work around it by using <code>*</code>.</dd>

    <dt>user mask</dt>

    <dd>Either remove your <code>package_mask.conf</code> entry or override it
    with <code>package_unmask.conf</code>.</dd>

    <dt>profile mask</dt>

    <dd>Override with <code>package_unmask.conf</code>.</dd>

    <dt>repository mask</dt>

    <dd>Override with <code>package_unmask.conf</code>.</dd>

    <dt>eapi</dt>

    <dd>You cannot override this mask. It indicates either a broken ebuild (if
    <code>EAPI=unknown</code> or an ebuild not supported by your current version
    of Paludis.</dd>

    <dt>license</dt>

    <dd>Accept the appropriate licences in <code>licenses.conf</code>.</dd>

    <dt>by association</dt>

    <dd>Unmask the associated package. This mask reason is currently only used
    for old style virtuals.</dd>
</dl>

<h3 id="syncfromcvs">Sync from CVS</h3>

<p>Syncing from CVS requires use of either the <code>cvs+pserver</code> or the <code>cvs+ssh</code> protocol.
The syntax for the configuration file line is
<code>sync = cvs+ssh://username@host:/path/to/cvsroot:modulename</code>. As an example,
for syncing with the <code>gentoo</code> repository via CVS, you would use
<code>sync = cvs+ssh://username@cvs.gentoo.org:/var/cvsroot:gentoo-x86</code>.</p>

<h3 id="syncfromsnapshot">Sync from a Gentoo tree snapshot</h3>

<p>Syncing from a tarball requires the <code>tar+http</code>
or <code>tar+ftp</code> protocol.  You must also
specify <code>sync_options = --strip-components=1</code>, as the
Gentoo snapshots place everything under a subdirectory
named <code>portage</code>.  For example:</p>
<pre>
# Replace this with your favourite Gentoo mirror
sync = tar+ftp://my.favourite.mirror/gentoo/snapshots/portage-latest.tar.bz2
sync_options = --strip-components=1
</pre>

<h2 id="generaloperation">General Operation</h2>

<h3 id="updatingdepends">Paludis does not update DEPENDs of already installed packages</h3>

<p>Paludis ignores DEPENDs of already installed packages by default. If you
need a different behaviour, use the <code>--dl-installed-deps-pre</code>
option.</p>

<h2 id="stricter">Paludis is Stricter than Portage</h2>

<h3 id="mergingweirdstuff">Merging Weird Stuff</h3>

<p>Paludis will refuse to merge various things:</p>

<ul>
    <li>Device nodes, fifos and similar weird files. Portage will merge these
    incorrectly and then leave stray garbage lying around; Paludis refuses to do
    anything with them. Ebuilds that need to install fancy file types should do
    so in <code>pkg_postinst</code>.</li>

    <li>Things containing spaces. The VDB format, which cannot be changed
    without breaking Portage compatibility, uses spaces as a delimiter. Portage
    behaves incorrectly on items with spaces in the name; Paludis simply refuses
    to touch them.</li>

    <li>Non-directories on top of directories. Paludis will not let a package
    overwrite a directory with a non-directory. This is for your own safety.
    Portage doesn't bail out on this, but instead ends up partially merging
    content and generally making a mess of your system.</li>
</ul>

<h3 id="testfailures">Packages Failing <code>src_test</code></h3>

<p>Various packages will fail <code>src_test</code>.</p>

<p>You can set <code>SKIP_FUNCTIONS="test"</code> to skip tests. This
is best done on a per-package basis via <code>bashrc</code>:</p>

<pre>
case "${PN}" in

    # Don't use src_test for these broken packages
    foo|bar|baz)
        SKIP_FUNCTIONS=test
        ;;

esac
</pre>

<p>Unfortunately not all package maintainers care about making their package's test
suite work. This is a nuisance, a) because it makes things much harder for arch
teams and b) because it makes it harder for users to catch bugs.</p>

<p>At this stage, you should not consider filing a bug about packages whose test
phases fail. This is something that is being handled by the Gentoo QA team and
various arch teams.</p>

<h3 id="sandboxwithroot">Sandbox Violations when <code>ROOT</code> is Set</h3>

<p>Various packages will give sandbox violations when installing to somewhere
other than <code>/</code>.</p>

<p>Paludis enforces <code>ROOT</code> via Sandbox. However, some packages don't
honour <code>ROOT</code>. To temporarily disable sandbox for these packages,
set <code>SANDBOX_PREDICT=/</code> or <code>SANDBOX_WRITE=/</code> as
appropriate.</p>

<h3 id="blacklist">Repository Blacklists</h3>

<p>Paludis will sometimes blacklist certain repositories. When using a
blacklisted repository, you will receive a warning when Paludis starts up. This
is not a fatal error, but you should realise that use of the repository in
question will likely lead to breakages.</p>

<p>Repositories are only blacklisted under extreme circumstances, such as:</p>

<ul>
    <li>When they are known to be very broken.</li>
    <li>When they are known to rely heavily upon quirks in Portage's behaviour
    that Paludis will not emulate.</li>
    <li>When they are known to be a security threat.</li>
</ul>

<h3 id="downgrades">Paludis wants to downgrade Qt or KDE</h3>

<p>Unlike Portage, Paludis enforces the dependencies of installed
packages, rather than those of the corresponding package in the tree.
Unfortunately, to work around Portage limitations, the Qt and KDE
eclasses are set up to depend specifically on those versions that are
in the tree at the time of installation.  The result is that after
upgrading to a newer version, dependant packages that were installed
before the new version became available will try to force a downgrade
back to the old version.</p>

<p>To solve this problem, run your Paludis update command with
the <code>--dl-downgrade warning</code> option, and check the
backtrace for the package that depends on the older library.
Reinstalling this package will fix the dependency.  Repeat if there is
more than one package with the problem.</p>

<h2 id="misfunctionality">Undesirable Misfunctionality</h2>

<h3 id="wgetresume">wget Resume Support</h3>

<p>Non-Problem: With Portage, <code>wget -c</code> is used to attempt to resume
downloads of partial files. With Paludis, this is not done by default.</p>

<p>Rationale: This leads to corruption and wasted bandwidth far too frequently.
In particular, if an error page that isn't recognised as a 404 is fetched from
one server (this is common for <code>mirror://sourceforge/</code>), resume
support means <code>wget</code> would then download all but the first few
hundred bytes of the file from somewhere else, leading to a corrupt distfile
notice only after lots of bandwidth has been wasted.</p>

<p>Paludis provides a <code>--safe-resume</code> option. When enabled, the download
logic is as follows:</p>

<ul>
    <li>If <code>output_file.-PARTIAL-</code> exists and is below a certain
    arbitrary threshold (currently somewhere in the 100KBytes region), delete it.</li>

    <li>Rather than downloading straight to <code>output_file</code>, download to
    <code>output_file.-PARTIAL-</code>. If this file already exists, resume rather than
    starting from scratch.</li>

    <li>If <code>wget</code> exits with success, move <code>output_file.-PARTIAL-</code>
    to <code>output_file</code>.</li>
</ul>

<p>Note that you must <strong>always</strong> specify this option,
not just after a download has already been interrupted. See <a href="#defaultoptions">the
    discussion on default options</a> for how to do this easily.</p>

<p>This logic is handled by the default fetcher for <code>http://</code>, <code>https://</code>
and <code>ftp://</code>. This can be overridden by a custom fetcher if finer grained control
is required.</p>

<h3 id="skipfirst">Build Resume / Skip First Support</h3>

<p>Non-Problem: Paludis doesn't have an equivalent to --resume --skipfirst in
Portage.</p>

<p>Rationale: Too unreliable, too flaky and far too widely abused; however, if
an ebuild exits with an error, Paludis will echo a resume command (<code>paludis
    -i10 =sys-apps/foo-1.23-r1 =app-misc/fnord-2 ...</code>) that can be used to
resume the build.</p>

<h3 id="nice">No Automatic Niceness Support</h3>

<p>Non-Problem: There's no <code>PORTAGE_NICENESS</code> equivalent.</p>

<p>Rationale: Learn how to use <code>nice</code>. There's no
<code>GCC_NICENESS</code> or <code>VIM_NICENESS</code> either.</p>

<h3 id="ask">No Ask Support</h3>

<p>Non-Problem: There's nothing like <code>emerge --ask</code>.</p>

<p>Rationale: the <code>paludis</code> client is non-interactive. If someone is
making an interactive client, there are much better ways of doing it than
the limited functionality that <code>emerge --ask</code> provides.</p>

<h3 id="digests">No Digest Generation</h3>

<p>Non-Problem: Paludis doesn't do digest or Manifest creation.</p>

<p>Rationale: In its current form, digest / Manifest is worthless. We will be
implementing Manifest2 when it gets properly worked out.</p>

<h3 id="xtermtitles">Restoring XTerm Titles</h3>

<p>Non-Problem: Paludis doesn't restore the xterm title on exit.</p>

<p>Rationale: Neither does anything else. Some programs do set it to a guessed
value based upon a default prompt for certain distributions, but they don't
restore it. You should be using <code>PROMPT_COMMAND</code> to do that yourself
-- see the <code>bash</code> documentation.</p>

<h2 id="differences">Paludis Does Things Differently</h2>

<h3 id="tree">No <code>--tree</code> Equivalent</h3>

<p>Paludis does not have something identical to <code>emerge --tree</code>. It
does, however, have <code>--show-reasons</code>, which we find to be
considerably more informative, useful and correct.</p>

<h3 id="features">No <code>FEATURES</code> Equivalent</h3>

<p>Paludis doesn't use the <code>FEATURES</code> variable. We find this to be
a rather ugly way of handling things. We do have equivalents to most values:</p>

<dl>
    <dt>ccache</dt>
    <dd>See <a href="#ccache">Use <code>ccache</code></a>.</dd>

    <dt>collision-protect</dt>
    <dd>There are various third party hooks that implement this. We might start
    shipping one as a demo hook at some point.</dd>

    <dt>distcc</dt>
    <dd>See <a href="#distcc">Use <code>distcc</code></a>.</dd>

    <dt>keepwork, keeptemp, noclean</dt>
    <dd>The <code>builtin_tidyup</code> phase does cleaning up. You can turn
    this phase off using <code>SKIP_FUNCTIONS="tidyup"</code>.</dd>

    <dt>nodoc, noinfo, noman</dt>
    <dd>You could write a hook that removes the relevant directories from
    <code>$D</code>.</dd>

    <dt>nostrip</dt>
    <dd>Again, it's a function, so use <code>SKIP_FUNCTIONS="strip"</code>.</dd>

    <dt>sandbox</dt>
    <dd>Always on.</dd>

    <dt>splitdebug</dt>
    <dd>Use <code>--debug-build split</code>.</dd>

    <dt>test</dt>
    <dd>Always on. See <a href="#testfailures">Packages failing
        <code>src_test</code></a>.</dd>
</dl>

<h3 id="emptytree_usechanged">No <code>--emptytree</code> Equivalent or No <code>--newuse</code> Equivalent</h3>

<p>The option <code>--dl-reinstall</code> handles both these cases.</p>

<h3 id="elog">ELOG Equivalent</h3>

<p>Paludis ships with a demo hook showing how to get a summary of messages after
all packages have been installed. It can be found in
<code>SHAREDIR/paludis/hooks/demos/elog.bash</code>. See <a
    href="hooks.html">the hooks documentation</a> for more information about
hooks.</p>

<h3 id="mkdir">No Automatic Directory Creation</h3>

<p>Portage usually automatically creates directories for things. Paludis will
usually refuse to create directories, except as a subdirectory of an existing
Paludis-owned directory. This is for security reasons -- Paludis does not know
what permissions are correct for you for the directory, and unlike Portage it
does not grant back-door root access to all users in a particular group.</p>

<p>Incidentally, if you want to let multiple users do Paludis cache writes and
the like, you should look into what <code>chmod +s</code> does to directories.</p>

<h3 id="revdep_rebuild">Revdep-rebuild Equivalent</h3>

<p>Gentoolkit provides a script for rebuilding broken binaries and shared libraries
using portage, Paludis provides a ruby script, check_linkage.rb. Install Paludis
with the ruby USE flag enabled, and run ruby <code>/usr/share/paludis/ruby/demos/check_linkage.rb</code>.</p>

<h2 id="repos">Repository Questions</h2>

<h3 id="profiles">Profiles vs Profiles</h3>

<p>Don't confuse the <code>profiles/</code> directory with the <code>profiles
    =</code> setting for ebuild format repositories. The special files
immediately under <code>profiles/</code>, such as
<code>profiles/thirdpartymirrors</code>, <code>profiles/use.desc</code>
and <code>profiles/package.mask</code>, are specific to that particular profile
and no other; the <code>profiles =</code> key has no effect upon them.</p>

<h3 id="repo_name">Repository names</h3>

<p>Because of a requirement forced into <a
    href="http://www.gentoo.org/proj/en/glep/glep-0042.html">GLEP 42</a> by the
peanut gallery, repositories are required to be uniquely identifiable. The
identifier must remain consistent even if a repository is moved, either locally
or remotely, and thus must be independent of user configuration.</p>

<p>For ebuild format repositories, this is controlled by the <code>profiles/repo_name</code>
file. It should contain a single string with no whitespace or funny characters.
For many repositories, this has already been created for you; for some overlays,
probably including your local overlay if you have one, the file is not yet
there so you will have to create it.</p>


@FOOTER@
</body>
</html>


