<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en">
<head>
<title>Paludis, the Other Package Mangler</title>
<link rel="stylesheet" href="paludis.css" type="text/css" />
</head>
<body>
@HEADER@

<h1>Paludis, the Other Package Mangler</h1>

<h2>Sets</h2>

<h3>Overview</h3>

<p>This document explains the concept known to Paludis as a 'set', and describes the standard
internal sets and how to create new sets.</p>

<h3>Formal Set Description</h3>

<p>Internally, a set is a name with an associated dependency-style specification. In most cases
the dependency specification will be an 'all-of' collection of package dependencies, although
this is not a hard restriction.</p>

<p>There are multiple origins for sets:</p>

<ul>
    <li>Some environment classes define their own package sets (possibly via user configuration
    files). A set defined by the environment <em>overrides</em> any later set of the same name.</li>

    <li>Most repositories define their own package sets. Some of these are defined internally --
    examples include <code>everything</code>, <code>system</code>, <code>world</code> and
    <code>security</code>. Repository classes may also provide a way for additional sets to be
    defined by the repository maintainer. If multiple repositories define a named set, the
    resulting set is all of these repository sets merged using an 'all-of' composite. The
    <code>everything</code> and <code>world</code> sets automatically contain <code>system</code>.</li>

    <li>Finally, the <code>everything</code>, <code>system</code>, <code>world</code> and
    <code>security</code> sets always exist, even if no repositories nor the environment defines
    them.</li>
</ul>

<p><strong>Important:</strong> a set is a named collecion of <em>dependency specifications</em>, not
a collection of packages.</p>

<h3>User Defined Sets</h3>

<p>The <code>DefaultEnvironment</code> environment class allows user defined package sets via
text files. These should be named <code><em>setname</em>.conf</code> and placed in
<code><em>confdir</em>/sets/</code>, where <code><em>confdir</em></code> is the configuration directory
in which <code>use.conf</code> et al. reside. The format is as follows:</p>

<ul>
    <li>Comments lines start with a <code>#</code>. These, and blank lines, are ignored.</li>
    <li>Lines consist of a symbol, followed by whitespace, followed by a package dependency
    atom.</li>
    <li>The symbol <code>*</code> should be used to mean "include this package dependency atom in
    the set".</li>
    <li>The symbol <code>?</code> should be used to mean "include this package dependency atom in
    the set if and only if the package part of the atom is matched by an installed package". For
    example, the line <code>? &gt;=app-editors/vim-7</code> means requires <code>vim-7</code> if
    and only if <code>app-editors/vim</code> (any version) is already installed.</li>
</ul>

<p>Most users will only have use for <code>*</code> lines.</p>

<h3>Portage Repositories Defined Sets</h3>

<p>Portage format repositories can supply their own sets. The <code>system</code> and
<code>security</code> sets are defined programmatically; other sets are defined by a file
named <code>sets/<em>setname</em>.conf</code>, which should be in the format described for
user defined sets above.</p>

<h3>Using Sets</h3>

<p>Sets can currently be used as targets for <code>paludis --query</code> and
<code>paludis --install</code>. They can also be used as the atom column in the
<code>use.conf</code>, <code>keywords.conf</code>, <code>licenses.conf</code>,
<code>package_mask.conf</code> and <code>package_unmask.conf</code>.</p>

@FOOTER@
</body>
</html>

