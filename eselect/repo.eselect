# Copyright 1999-2006 Stephen Bennett
# Distributed under the terms of the GNU General Public License v2
# $Id: $

DESCRIPTION="Manage Paludis repository config files"
MAINTAINER="spb@exherbo.org"
SVN_DATE='$Date: $'
VERSION=$(svn_date_to_version "${SVN_DATE}" )

REPO_CONFIG_FILE="${ROOT}/var/lib/eselect/repo/repo.config"

inherit config

## {{{ Utility functions

cat_file() {
	local filename=$1
	if [[ -r ${filename} ]]; then
		cat "${filename}"
	elif [[ ${filename} == http://* ]]; then
		wget -O - -q "${filename}"
	elif [[ ${filename} == svn://* ]]; then
		svn cat "${filename}"
	elif [[ ${filename} != */* ]]; then
		templateroot="$(get_var template_root)"
		templatesuffix="$(get_var template_suffix)"
		cat_file "${templateroot}/${filename}.templ${template_suffix}"
	else
		die -q "Couldn't load ${filename}"
	fi
}

get_var() {
	default_template_root="http://paludis.pioto.org/trac/browser/repo-templates"
	default_repo_root="${ROOT}/var/paludis/repositories"
	default_config_root="${ROOT}/etc/paludis"
	default_template_suffix="?format=raw"
	if [[ -L /etc/make.profile ]]; then
		default_profiles="$(canonicalise /etc/make.profile)"
	fi
	local var=$1
	local defvar="default_$1"
	local value="$(load_config ${REPO_CONFIG_FILE} "${var}")"
	if [[ -z "${value}" ]]; then
		value=${!defvar}
	fi
	echo "${value}"
}

## }}}

### list action

## {{{ list stuff
describe_list() {
	echo "Show available repository templates"
}

do_list() {
	templateroot=$(get_var template_root)
	templatesuffix=$(get_var template_suffix)

	local -a list=( $(cat_file ${templateroot}/list${templatesuffix}) )
	write_list_start "Available repository templates: (* == installed)"
	local count=0
	for i in "${list[@]}"; do
		local inst=''
		if [[ -e $(get_var config_root)/repositories/${i}.conf ]]; then
			inst=$(highlight \*)
		fi
		write_numbered_list_entry $(( ++count )) "${i} ${inst}"
	done
}
## }}}

### install action

## {{{ install stuff
describe_install() {
	echo "Install a repository config from a given template name"
}

do_install() {
	local force=0
	if [[ $1 == -f ]] || [[ $1 == --force ]]; then
		force=1
		shift
	fi

	local name=$1
	if [[ ${name} == */* ]]; then
		# We have what looks like a full path.
		name=$(basename $name)
		name=${name%.templ}
	fi

	if [[ -e $(get_var config_root)/repositories/$1.conf ]] && [[ $force == 0 ]]; then
		write_error_msg "$1 appears to be already installed. "
		write_error_msg "To overwrite it, use --force or -f."
		die -q "Repository already exists and --force not specified"
	fi

	do_subst() {
		if [[ $1 == location_of ]]; then
			echo $(paludis --list-repositories --repository $2 | sed -n \
				's/.*location: *//p') || die -q "Couldn't find location of $2"
		elif [[ $1 == profiles ]]; then
			profiles=$(get_var profiles)
			if [[ -z ${profiles} ]]; then
				die -q "profile expansion requested but no profiles set."
			fi
			echo ${profiles}
		elif [[ $1 == repo_root ]]; then
			echo $(get_var repo_root)
		fi
	}

	( cat_file $1 || die -q "Couldn't read template $1" ) | (
		local format=portage
		while read line; do
			while [[ $line == *@*@* ]]; do
				subst=${line#*@}
				subst=${subst%%@*}
				line=${line%%@*}$(do_subst ${subst})${line#*@*@}
			done
			if [[ ${line} == format=* ]]; then
				format=${line#format=}
			fi
			echo $line
		done;
		if [[ ${format} == portage ]]; then
			distdir=$(get_var distdir)
			[[ -n ${distdir} ]] && echo "distdir=${distdir}"
		fi
	) >"$(get_var config_root)/repositories/${name}.conf.tmp"

	if [[ -f "$(get_var config_root)/repositories/${name}.conf.tmp" ]]; then
		mv $(get_var config_root)/repositories/${name}.conf{.tmp,}
	else
		die -q "Error creating ${1}.conf"
	fi
}

## }}}

### uninstall action

## {{{ uninstall stuff

describe_uninstall()
{
	echo "Remove a repository config"
}

do_uninstall() {
	repo_dir="$(get_var config_root)/repositories"
	for i in "$@"; do
		if [[ -f "${repo_dir}/${i}.conf" ]]; then
			rm -f "${repo_dir}/${i}.conf"
		else
			write_error_msg "Repository '${i}' not found at"
			write_error_msg "${repo_dir}/${i}.conf"
		fi
	done
}

## }}}

### set action

## {{{ set stuff

describe_set()
{
	echo "Set various config values"
}

do_set()
{
	if [[ $# -ge 2 ]]; then
		var=$1; shift
		store_config ${REPO_CONFIG_FILE} $var "$*"
	elif [[ $# -eq 1 ]]; then
		store_config ${REPO_CONFIG_FILE} $1 ""
	fi
}

## }}}

### show action

## {{{ show stuff

describe_show()
{
	echo "Display various configuration variables"
}

do_show()
{
	if [[ -n $1 ]]; then
		vars=$1
	else
		vars=( template_root template_suffix repo_root profiles distdir config_root )
		write_list_start "Current configuration variables:"
		for i in ${vars[@]}; do
			value=$(load_config ${REPO_CONFIG_FILE} $i)
			if [[ -n ${value} ]]; then
				write_kv_list_entry $i "${value}"
			fi
		done
	fi
}

## }}}

# vim: ts=4 sw=4 noet fdm=marker
